<languageVersion : 1.0;>

kernel HSLAdjust
<   namespace : "com.quasimondo";
    vendor : "Mario Klingemann";
    version : 1;
>
{
    input image4 src;
    output pixel4 dst;

    parameter float hue
    <
        minValue: -360.0;
        maxValue: 360.0;
        defaultValue: 0.0;
    >;
    
    parameter float saturation
    <
        minValue: -100.0;
        maxValue: 100.0;
        defaultValue: 0.0;
    >;
    
    parameter float lightness
    <
        minValue: -100.0;
        maxValue: 100.0;
        defaultValue: 0.0;
    >;
    
    void
    evaluatePixel()
    {
        dst = sampleNearest(src,outCoord());
        
        float3 hsl = float3(0.0);
         
        float v = max( dst.r, max( dst.g, dst.b ));
        float m = min( dst.r, min( dst.g, dst.b ));

        hsl.b = (m + v) * 0.5;
        float vm = v - m;
        hsl.g = vm;
        
        hsl.g /= mix( v+m, 2.0-v-m, step( hsl.b,0.5) );
        float3 rgb = (float3( v ) - dst.rgb) / ( vm + (1.0 - abs( sign(vm))));

        float3 rgbvdiff = 1.0 - abs( sign(dst.rgb - v ) );
        rgbvdiff.g *= (1.0 - rgbvdiff.r );
        rgbvdiff.b *= (1.0 - rgbvdiff.r ) * (1.0 - rgbvdiff.g );
        
        float3 rgbmdiff = 1.0 - abs( sign( dst.rgb - m ));
        rgbmdiff.b *= (1.0 - rgbmdiff.g );
        rgbmdiff.r *= (1.0 - rgbmdiff.g ) * (1.0 - rgbmdiff.b );
    
        hsl.r =  ( rgbvdiff.r * mix( 1.0 - rgb.g, 5.0 + rgb.b, rgbmdiff.g ) +
                   rgbvdiff.g * mix( 3.0 - rgb.b, 1.0 + rgb.r, rgbmdiff.b ) +
                   rgbvdiff.b * mix( 5.0 - rgb.r, 3.0 + rgb.g, rgbmdiff.r ));
        
        dst.rgb = hsl;
       
        dst.r = mod(dst.r + hue / 60.0 + 6.0, 6.0);
        dst.g = clamp(dst.g+ saturation * 0.01,0.0,1.0);
        dst.b = clamp(dst.b+ lightness * 0.01,0.0,1.0);
       
        v = mix(  dst.b * (1.0 + dst.g),dst.b + dst.g - dst.b * dst.g, step(dst.b,0.5  ) );
        m = dst.b + dst.b - v;
        float sv = ( v - m ) / v;

        float sextant = mod(floor(dst.r), 6.0);
        float vsf = v * sv * (dst.r - sextant);
        float mid1 = m + vsf;
        float mid2 = v - vsf;
       
        float sx0 = 1.0 - abs( sign( sextant ));
        float sx1 = (1.0 - abs( sign( sextant - 1.0 )));
        float sx2 = (1.0 - abs( sign( sextant - 2.0 )));
        float sx3 = (1.0 - abs( sign( sextant - 3.0 )));
        float sx4 = (1.0 - abs( sign( sextant - 4.0 ))); 
        float sx5 = (1.0 - abs( sign( sextant - 5.0 ))); 
        
        dst.rgb = sx0 * float3( v, mid1, m ) + 
                  sx1 * float3( mid2, v, m  )+ 
                  sx2 * float3( m, v, mid1 ) + 
                  sx3 * float3( m, mid2, v ) +          
                  sx4 * float3( mid1, m, v ) + 
                  sx5 * float3( v, m, mid2 ); 
       
      }
}
